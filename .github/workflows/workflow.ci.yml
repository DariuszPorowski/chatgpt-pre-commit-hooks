---
name: CI
on:
  push:
    branches:
      - main
  pull_request:
    # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
    branches:
      - main
    paths:
      - "**.py"
      - ".pre-commit-config.yaml"
      - ".pre-commit-hooks.yaml"
      - "pyproject.toml"
      - ".github/workflows/workflow.ci.yml"
      - "!docs/**"

# Allow one concurrent
concurrency:
  group: ${{ format('{0}-{1}', github.event_name, github.ref) }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  gh-diag:
    name: Run GitHub diagnostic
    uses: ./.github/workflows/reuse.ghdiag.yml

  dependency-review:
    if: ${{ github.repository_visibility == 'public' && (github.event_name == 'pull_request' && !github.event.pull_request.draft) }}
    name: Dependency Review
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Run Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          comment-summary-in-pr: true

  codeql-analyze:
    if: ${{ github.repository_visibility == 'public' && (github.event_name == 'push' || (github.event_name == 'pull_request' && !github.event.pull_request.draft && !contains(github.event.head_commit.message, 'skip-codeql'))) }}
    name: CodeQL Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ["python"]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Use only 'java' to analyze code written in Java, Kotlin or both
        # Use only 'javascript' to analyze code written in JavaScript, TypeScript or both
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with "+" to use these queries and those in the config file.

          # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
          # queries: security-extended,security-and-quality

      # Autobuild attempts to build any compiled languages  (C/C++, C#, Go, or Java).
      # If this step fails, then you should remove it and run the build manually (see below)
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
      # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

      #   If the Autobuild fails above, remove it and uncomment the following three lines.
      #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

      # - run: |
      #     echo "Run, Build Application using script"
      #     ./location_of_script_within_repo/buildscript.sh

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"
          upload: false
          output: codeql-results

      - name: Upload Sarif Artifact
        uses: actions/upload-artifact@v3
        with:
          name: Analyses Results (SARIF)
          path: codeql-results
          if-no-files-found: warn

  codeql-results:
    if: ${{ github.repository_visibility == 'public' && (github.event_name == 'push' || (github.event_name == 'pull_request' && !github.event.pull_request.draft && !contains(github.event.head_commit.message, 'skip-codeql'))) }}
    name: CodeQL Results
    needs:
      - codeql-analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      security-events: write
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Download Sarifs
        uses: actions/download-artifact@v3
        with:
          path: codeql-results

      - name: Upload Results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: codeql-results
          wait-for-processing: true

  lint:
    if: ${{ github.event_name == 'push' || (github.event_name == 'pull_request' && !github.event.pull_request.draft) }}
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version-file: .python-version

      - name: Install dependencies
        run: pip install .[dev]

      - name: Run Ruff
        run: ruff check --config pyproject.toml --no-fix .

  test-build:
    if: ${{ github.event_name == 'push' || (github.event_name == 'pull_request' && !github.event.pull_request.draft) }}
    name: Test (build)
    runs-on: ubuntu-latest
    needs:
      - lint
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: pip install . .[build]

      - name: Build wheel
        run: python -m pip wheel --no-deps -w dist .

      - name: Install test build
        # using a wildcard as filename on Windows requires a bash shell
        shell: bash
        run: python -m pip install dist/*.whl

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v3
        with:
          name: test-build
          path: dist/*.whl

  # vhs-demo:
  #   if: ${{ github.event_name == 'pull_request' && !github.event.pull_request.draft }}
  #   name: VHS demo
  #   # needs:
  #   #   - test-build
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: write
  #   env:
  #     OPENAI_API_KEY: ${{ secrets.TEST__OPENAI_API_KEY }}
  #     OPENAI_API_BASE: ${{ secrets.TEST__OPENAI_API_BASE }}
  #     OPENAI_API_TYPE: ${{ vars.TEST__OPENAI_API_TYPE }}
  #     OPENAI_MODEL: ${{ vars.TEST__OPENAI_MODEL }}
  #   steps:
  #     - name: Checkout Repo
  #       uses: actions/checkout@v3

  #     - name: Init VHS
  #       uses: charmbracelet/vhs-action@v1
  #       with:
  #         path: demo/init.tape

  #     - name: Prepare VHS demo repo
  #       run: |
  #         rm -f init.gif
  #         demo/vhs_demo_repo.sh ci

  #     - name: Commit VHS demo
  #       uses: stefanzweifel/git-auto-commit-action@v4
  #       with:
  #         branch: ${{ github.event.pull_request.head.ref || github.head_ref || github.ref }}
  #         commit_message: Update VHS demo
  #         file_pattern: "*.gif *.ascii"

  test-install:
    if: ${{ github.event_name == 'push' || (github.event_name == 'pull_request' && !github.event.pull_request.draft) }}
    name: Test (build)
    needs:
      - test-build
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download wheel artifact
        uses: actions/download-artifact@v3
        with:
          name: test-build
          path: dist

      - name: Install test
        # using a wildcard as filename on Windows requires a bash shell
        shell: bash
        run: python -m pip install dist/*.whl

      - name: Install dependencies
        run: pip install .[dev]

      - name: Run test repo
        run: python .github/scripts/test_repo.py
        env:
          TEST__OPENAI_API_KEY: ${{ secrets.TEST__OPENAI_API_KEY }}
          TEST__OPENAI_API_BASE: ${{ secrets.TEST__OPENAI_API_BASE }}
          TEST__OPENAI_API_TYPE: ${{ vars.TEST__OPENAI_API_TYPE }}
          TEST__OPENAI_MODEL: ${{ vars.TEST__OPENAI_MODEL }}
